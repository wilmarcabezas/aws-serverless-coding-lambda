service: coding-lambda-serverless
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    tableName: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          method: GET
          path: get-user/{ID}
          cors: true
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
          method: GET
          path: get-player-score/{ID}
          cors: true

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  tableName: player-points
  s3Sync:
    - bucketName: s3uploaddemobucket-uploadwilmarux
      localDir: uploadData

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: s3uploaddemobucket-uploadwilmarux
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
         - AttributeName: ID
           AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
